[{"F:\\projects\\class15_16-quizApp\\quizapp\\src\\App.tsx":"1","F:\\projects\\class15_16-quizApp\\quizapp\\src\\index.tsx":"2","F:\\projects\\class15_16-quizApp\\quizapp\\src\\serivces\\quiz_services.ts":"3","F:\\projects\\class15_16-quizApp\\quizapp\\src\\Component\\QuestionCard.tsx":"4"},{"size":1518,"mtime":1612457940625,"results":"5","hashOfConfig":"6"},{"size":282,"mtime":1612345457243,"results":"7","hashOfConfig":"6"},{"size":924,"mtime":1612457546710,"results":"8","hashOfConfig":"6"},{"size":1608,"mtime":1612456327284,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"15o96cf",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"F:\\projects\\class15_16-quizApp\\quizapp\\src\\App.tsx",["19"],"F:\\projects\\class15_16-quizApp\\quizapp\\src\\index.tsx",[],"F:\\projects\\class15_16-quizApp\\quizapp\\src\\serivces\\quiz_services.ts",[],"F:\\projects\\class15_16-quizApp\\quizapp\\src\\Component\\QuestionCard.tsx",["20","21"],"import React, { useState } from 'react';\r\nimport { QuestionPropType } from '../Types/quiz_types';\r\n\r\nexport const QuestionCard: React.FC<QuestionPropType> = ({ question, option, callback }) => {\r\n\r\n    let [selectedAnswer, setSelectedAnswer] = useState(\"\");\r\n    let [score, setScore] = useState();\r\n\r\n    const handleSelection = (e:any) => {\r\n        setSelectedAnswer(e.target.value) \r\n    }\r\n    \r\n    return (\r\n        <div className=\"question-container\">\r\n            <h1>Question Card</h1>\r\n            <div className=\"question\">\r\n                {question}\r\n            </div>\r\n\r\n            <form onSubmit={(e: React.FormEvent<EventTarget>) =>callback(e, selectedAnswer) }>\r\n                {\r\n                    option.map((opt: string, ind: number) => {\r\n                        return (\r\n                            <div key={ind}>\r\n                                <label>\r\n                                    <input \r\n                                    type=\"radio\" \r\n                                    name=\"opt\" \r\n                                    required\r\n                                    value={opt}\r\n                                    checked={selectedAnswer === opt }\r\n                                    onChange={handleSelection}\r\n                                     />\r\n                                    {opt}\r\n    \r\n                                </label>\r\n                            </div>\r\n                        )\r\n\r\n                    })\r\n                }\r\n                <input type=\"submit\"  />\r\n                \r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"22","severity":1,"message":"23","line":4,"column":10,"nodeType":"24","messageId":"25","endLine":4,"endColumn":14},{"ruleId":"22","severity":1,"message":"26","line":7,"column":10,"nodeType":"24","messageId":"25","endLine":7,"endColumn":15},{"ruleId":"22","severity":1,"message":"27","line":7,"column":17,"nodeType":"24","messageId":"25","endLine":7,"endColumn":25},"@typescript-eslint/no-unused-vars","'Quiz' is defined but never used.","Identifier","unusedVar","'score' is assigned a value but never used.","'setScore' is assigned a value but never used."]